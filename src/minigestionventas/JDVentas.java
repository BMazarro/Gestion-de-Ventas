/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package minigestionventas;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.sql.Connection;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dam09
 */
public class JDVentas extends javax.swing.JDialog implements ItemListener {
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultTableModel modelo2 = new DefaultTableModel();
    Connection c;
    MenuOpciones padre;
    Statement sentencia;
    int idventa, idcliente, idproducto, cantidad;
    double precioOriginal;
    double precioCambiado;
    double importeV;
    String fechaventa;
    Calendar c1 = Calendar.getInstance();
    Calendar c2= Calendar.getInstance();
    String dia, mes, annio;
    String fechaActual;
    int tipoConexion=-1;
    /**
     * Creates new form JDVentas
     */
    public JDVentas(javax.swing.JDialog parent, boolean modal)  {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        padre= (MenuOpciones)parent;
        c= padre.obtieneConexion();
        tipoConexion= padre.obtieneTipo();
        combo.addItem("id cliente");
        combo.addItem("nombre cliente");
        combo.addItem("fechas");
        combo.setSelectedIndex(0);
        combo.addItemListener(this);
        
        dia = Integer.toString(c1.get(Calendar.DATE));
        mes = Integer.toString(c1.get(Calendar.MONTH)+1);
        annio = Integer.toString(c1.get(Calendar.YEAR));
        fechaActual = dia+"/"+mes+"/"+annio;
        System.out.println(""+fechaActual);
        try {
            inicializarTabla();
            InicializaTabla2();
            mostrarTabla();
            NoeditarFechas();
        } catch (SQLException ex) {
            Logger.getLogger(JDClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // -------------- LIMPIAR LA TABLA PRINCIPAL ---------------------------------
    void limpiar(){
        while (table.getRowCount()!=0){
           ((DefaultTableModel)table.getModel()).removeRow(0);
        }
    }  
    // ------------- LIMPIAR TABLA DE BUSQUEDAS --------------------------------
    void limpiarTabla2(){
        while (table2.getRowCount()!=0){
           ((DefaultTableModel)table2.getModel()).removeRow(0);
        }
    }
    // -------------- INICIALIZAMOS TABLA PRINCIPAL -------------------------
    public void inicializarTabla() {    
      table.setModel(modelo);     
      modelo.addColumn("IDVENTA");
      modelo.addColumn("FECHAVENTA");
      modelo.addColumn("IDCLIENTE");
      modelo.addColumn("IDPRODUCTO");
      modelo.addColumn("CANTIDAD");
      modelo.addColumn("PRECIO");
}
    // ------------- METODO QUE OBTIENE EL NUMERO DE VENTAS TOTALES EN LA BBDD----------
    public int obtieneNumRegistros() throws SQLException{
        Statement sent=c.createStatement();
        int contador=0;
        ResultSet rs2= sent.executeQuery("Select count(IDVENTA) from VENTAS");
        while(rs2.next()){
            contador=contador+1;
        }
        System.out.println(""+contador);
        return contador;
        
    } 
    // ------------ MOSTRAR DATOS EN LA TABLA PRINCIPAL -----------------------------
    public void mostrarTabla() throws SQLException{
      Statement s= c.createStatement();
      ResultSet rs = s.executeQuery("Select * from Ventas order by IDVENTA"); 
      while(rs.next()){           
          Object [] fila= new Object [6]; // tama√±o con el numero de columnas (campos)        
          for (int i=0; i<fila.length; i++){
              fila[i]= rs.getObject(i+1);              
          }
           modelo.addRow(fila);        
      }  
      
    } 
    // ------------ EJECUTAR INSTRUCCION INSERT, UPDATE O DELETE --------------------
    public  void ejecutaSQL(String sql, int n) throws SQLException{
            sentencia = c.createStatement();
            sentencia.execute(sql);
            if (n==1){
                System.out.println("Alta venta");
            }
            if (n==2){
                System.out.println("Venta eliminada");
            }
            sentencia.close();
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        combo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        tdia = new javax.swing.JTextField();
        tmes = new javax.swing.JTextField();
        tannio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tdia1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tmes1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tannio1 = new javax.swing.JTextField();
        tnumVentas = new javax.swing.JLabel();
        timporteVentas = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        jButton1.setText("ALTA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("BAJA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("BUSCAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("VENTAS");

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minigestionventas/go_back.png"))); // NOI18N
        jButton5.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/minigestionventas/go_back.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        jLabel2.setText("Buscar venta...");

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(table2);

        tdia.setText("dd");

        tmes.setText("mm");

        tannio.setText("aa");

        jLabel3.setText(" /");

        jLabel4.setText(" /");

        tdia1.setText("dd");

        jLabel5.setText(" /");

        tmes1.setText("mm");

        jLabel6.setText(" /");

        tannio1.setText("aa");
        tannio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tannio1ActionPerformed(evt);
            }
        });

        tnumVentas.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        tnumVentas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        timporteVentas.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timporteVentas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Total de Ventas:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Importe Total de Ventas:");

        jLabel11.setText(" DD        /    MM        /   AAAA   ");

        jLabel7.setText("‚Ç¨");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(35, 35, 35)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(timporteVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(tnumVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tdia1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tmes1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tannio1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel11)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(tdia, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tmes, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tannio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jLabel1)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)
                            .addComponent(jButton2)
                            .addComponent(jButton1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tdia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tmes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(tannio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(tnumVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tdia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tmes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(tannio1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3))
                    .addComponent(timporteVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed
   
    
    // ---------- BOTON INSERTAR REGISTRO -------------------------------
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean sigue=true;  
        
        // ----------- VALIDACIONES --------------------------------------------------
        while(sigue){
            // el identificador de la venta no debe existir anteriormente
            idventa = Integer.parseInt(JOptionPane.showInputDialog("ID de la venta:"));
            try {
                sigue=comprobarIDVenta();
            } catch (SQLException ex) {
                Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        sigue=true;
        while(sigue){
            // el identificador del cliente debe existir en la bbdd
            idcliente = Integer.parseInt(JOptionPane.showInputDialog("ID del cliente:"));
            try {
                sigue=comprobarIDCliente();
            } catch (SQLException ex) {
                Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        sigue=true;
        while(sigue){
            // el identificador del producto debe existir en la bbdd
            idproducto = Integer.parseInt(JOptionPane.showInputDialog("ID del producto:"));
            try{
               sigue=comprobarIDProducto();
            } catch (SQLException ex) {
                Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
            }                
        }
        sigue= true;
        int stock=0;
        while(sigue){
            cantidad = Integer.parseInt(JOptionPane.showInputDialog("Cantidad:"));
            if (cantidad < 0) {
                sigue=true;
                JOptionPane.showMessageDialog(rootPane, "No puede introducir cantidades negativas");
            }
            else{
                sigue=false;
            }
        }
        
        sigue=true;
        while(sigue){
            stock=0;
            try {
                stock = ComprobarStock();
            } catch (SQLException ex) {
                Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
            stock= stock - cantidad;
            if (stock < 0){
                JOptionPane.showMessageDialog(rootPane, "No puede comprar esa cantidad. Stock negativo");
                sigue=true;
            }
            else{
                sigue=false;
            }
        }
        // Recogemos el pvp de ese articulo y calculamos el precio de la venta segun la cantidad
        Statement s;
        ResultSet rs; 
        double pvp=0.0;
        try {
            s = c.createStatement();
            rs = s.executeQuery("Select PVP from Productos where ID="+idproducto);
            while(rs.next()){ 
                pvp= rs.getDouble(1);         
            } 
        } catch (SQLException ex) {
            Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        precioOriginal = pvp;
        precioOriginal = Redondear(precioOriginal, 2); 
        importeV= pvp*cantidad; // importe de esta venta de este producto
        String cadena;
        sigue= true;
        while(sigue){
            cadena= JOptionPane.showInputDialog("Precio",precioOriginal);
            cadena = cadena.replace(",",".");
            precioCambiado = Double.parseDouble(cadena);    
            sigue=comprobarPrecioCambiado(); // se sale del bucle si el precio es mayor que el original Y menor del 20%          
        } 
        // ----------- FIN DE VALIDACIONES ------------------------------------------
        
        
        // ----------- EJECUTAMOS EL ALTA DE LA VENTA --------------------------------------------------------------------------------
        String sql= "INSERT INTO VENTAS VALUES("+idventa+",'"+fechaActual+"',"+idcliente+","+idproducto+","+cantidad+","+precioCambiado+")";
        try { 
            ejecutaSQL(sql, 1);
            limpiar();
            mostrarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(JDClientes.class.getName()).log(Level.SEVERE, null, ex);
        } 
        // ----------- ACTUALIZAMOS EL STOCK -----------------------
        ActualizarStock(stock);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    // --------- ACTUALIZAR STOCK ---------------
    public void ActualizarStock(int stock){     
        String sql= "UPDATE PRODUCTOS SET "+                  
                   "STOCKACTUAL=" + stock +
                   " WHERE ID="+idproducto;
        try { 
            ejecutaSQL(sql, 3);
            limpiar();
            mostrarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(JDProductos.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    // --------- COMPROBAR STOCK -------------------------
    public int ComprobarStock () throws SQLException{
        int stock=0;
        Statement s= c.createStatement();
        ResultSet rs= s.executeQuery("Select STOCKACTUAL from Productos where ID="+idproducto);
        while(rs.next()){
            stock= rs.getInt(1);
        }
        return stock;
    }
    // --------- REDONDEAR DECIMALES ---------------------------
    public static double Redondear(double numero,int digitos){
        int cifras=(int) Math.pow(10,digitos);
        return Math.rint(numero*cifras)/cifras;
    }
    // --------- COMPRUEBA RESTRICCION DE PRECIO ---------------------------------------
    public boolean comprobarPrecioCambiado(){
        boolean sigue= true;
        double topeMax= precioOriginal + (precioOriginal *0.2);
        double topeMin= precioOriginal;
        
        if ((precioCambiado > topeMax) || (precioCambiado < precioOriginal))
                {
                    JOptionPane.showMessageDialog(rootPane, "Restriccion de precio. No mayor del 20% ni menor"
                            + "que el precio original");
                    sigue= true;
                }
        else{
            sigue= false;
        }
        return sigue;
    }
    // --------- COMPRUEBA RESTRICCION DE ID -----------------------------
    public boolean comprobarIDProducto() throws SQLException{
        boolean sigue= true;
        Statement sentencia2;
        String sql= "Select * from Productos where ID="+idproducto;
        sentencia2 = c.createStatement();
        ResultSet r=sentencia2.executeQuery(sql);
        if(r.next()==false){    //si no existe
            sigue=true;
            JOptionPane.showMessageDialog(rootPane, "El producto no existe en la base de datos");           
        }
        else{
            sigue=false;        
        }
        return sigue;
    }
    // --------- COMPRUEBA RESTRICCION DE ID -----------------------------
    public boolean comprobarIDCliente() throws SQLException{
        boolean sigue= true;
        Statement sentencia2;
        String sql= "Select * from Clientes where ID="+idcliente;
        sentencia2 = c.createStatement();
        ResultSet r=sentencia2.executeQuery(sql);
        if(r.next()==false){    //si no existe
            sigue=true;
            JOptionPane.showMessageDialog(rootPane, "El cliente no existe en la base de datos");           
        }
        else{
            sigue=false;        
        }
        return sigue;
    }
     // --------- COMPRUEBA RESTRICCION DE ID -----------------------------  
    public boolean comprobarIDVenta() throws SQLException{
        boolean sigue=true;
        Statement sentencia2;
        String sql= "Select * from Ventas where IDVENTA="+idventa;
        sentencia2 = c.createStatement();
        ResultSet r=sentencia2.executeQuery(sql);
        if(r.next()==false){    //si no existe
            sigue=false;
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Ya existe una venta con ese ID");
        }
        return sigue;
    }
    
    // ----------- BOTON ELIMINAR REGISTRO ------------------------------------
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int i= table.getSelectedRow();
       if (i== -1){
           JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un registro");
       }
       else {
           int n=JOptionPane.showConfirmDialog(null, "Se va a eliminar el registro, est√° seguro?", "Confirmar baja", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
           if (n==0){
               String sql="DELETE VENTAS WHERE VENTAS.IDVENTA="+table.getValueAt(i, 0);
                try {
                    ejecutaSQL(sql, 2);
                } catch (SQLException ex) {
                     Logger.getLogger(JDVentas.class.getName()).log(Level.SEVERE, null, ex);
                }
                modelo.removeRow(table.getSelectedRow());
           }        
       }
    }//GEN-LAST:event_jButton2ActionPerformed
    // --------- BOTON BUSCAR -----------------------------------------------------------
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        java.math.BigDecimal bd;
        int n= combo.getSelectedIndex();
        int estadoID =0;
        int estadoNom= 0;
        boolean sigue= true;
        // ---------- BUSCAMOS POR ID -------------------------------------------------
        if (n==0){
            limpiarTabla2();
            int id= Integer.parseInt(JOptionPane.showInputDialog("Por ID: ¬øQue cliente desea buscar?"));
            try { 
                       Statement s= c.createStatement();
                        ResultSet rs = s.executeQuery("Select * from VENTAS where IDCLIENTE="+id+" order by FECHAVENTA");    
                        while(rs.next()){       
                             Object [] fila= new Object [6];         
                             for (int i=0; i<fila.length; i++){
                                    fila[i]= rs.getObject(i+1);
                                }     
                               modelo2.addRow(fila);
                        }
                        ResultSet rs2 = s.executeQuery("Select COUNT(IDVENTA) from VENTAS where IDCLIENTE="+id);    
                        int contador=0;
                        while(rs2.next()){       
                            contador=rs2.getInt(1);
                        }
                        tnumVentas.setText(""+contador);
                        if (tipoConexion==2 || tipoConexion==3){
                            double importetotal = 0.0;
                            ResultSet rs3 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS where IDCLIENTE="+id);    

                            while(rs3.next()){       
                                 importetotal= (double)rs3.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);
                        
                        } else{
                            BigDecimal importetotal = null;
                            ResultSet rs3 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS where IDCLIENTE="+id);    

                            while(rs3.next()){       
                                 importetotal= (BigDecimal)rs3.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);
                        }
                } catch (SQLException ex) {
                    Logger.getLogger(JDClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        // ---------- BUSCAMOS POR NOMBRE --------------------------------------------
        if (n==1){
            limpiarTabla2();
            String nombre= JOptionPane.showInputDialog("Por Nombre: ¬øQue cliente desea buscar?");
            try { 
                       Statement s= c.createStatement();
                        ResultSet rs = s.executeQuery("Select VENTAS.* from VENTAS,CLIENTES where VENTAS.IDCLIENTE=CLIENTES.ID AND CLIENTES.NOMBRE='"+nombre+"' order by FECHAVENTA");    
                       
                        while(rs.next()){       
                             Object [] fila= new Object [6];         
                             for (int i=0; i<fila.length; i++){
                                    fila[i]= rs.getObject(i+1);
                                }     
                               modelo2.addRow(fila);
                        }
                        ResultSet rs2 = s.executeQuery("Select COUNT(IDVENTA) from VENTAS,CLIENTES where VENTAS.IDCLIENTE=CLIENTES.ID AND CLIENTES.NOMBRE='"+nombre+"'");    
                        int contador=0;
                        while(rs2.next()){       
                            contador=rs2.getInt(1);
                        }
                        tnumVentas.setText(""+contador);
                        
                        if (tipoConexion==2 || tipoConexion==3){
                            double importetotal = 0.0;
                            ResultSet rs3 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS,CLIENTES where VENTAS.IDCLIENTE=CLIENTES.ID AND CLIENTES.NOMBRE='"+nombre+"'");    

                            while(rs3.next()){       
                                 importetotal= (double)rs3.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);
                        }
                        else{
                            BigDecimal importetotal = null;
                            ResultSet rs3 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS,CLIENTES where VENTAS.IDCLIENTE=CLIENTES.ID AND CLIENTES.NOMBRE='"+nombre+"'");    

                            while(rs3.next()){       
                                 importetotal= (BigDecimal)rs3.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);
                        }
                } catch (SQLException ex) {
                   
                }
            
        }
        // ---------- BUSCAMOS POR FECHAS ----------------------------------------------
        if (n==2){
            limpiarTabla2();
            if (tdia.getText()!="" && tmes.getText()!="" && tannio.getText()!="" &&
                    tdia1.getText()!="" && tmes1.getText()!="" && tannio1.getText()!=""){
                
                sigue= ComprobarFechas();
                if (sigue==true){
                            
                String fecha= tdia.getText()+"/"+tmes.getText()+"/"+tannio.getText();
                String fecha1= tdia1.getText()+"/"+tmes1.getText()+"/"+tannio1.getText();
                if ( tipoConexion==2 || tipoConexion==3){
                    fecha = tannio.getText()+"-"+tmes.getText()+"-"+tdia.getText();
                    fecha1 = tannio1.getText()+"-"+tmes1.getText()+"-"+tdia1.getText();
                }
                try { 
                       Statement s= c.createStatement();
                        ResultSet rs = s.executeQuery("Select * from VENTAS where FECHAVENTA BETWEEN '"+fecha+"' AND '"+fecha1+"' order by FECHAVENTA");    
                        while(rs.next()){       
                             Object [] fila= new Object [6];         
                             for (int i=0; i<fila.length; i++){
                                    fila[i]= rs.getObject(i+1);
                                }     
                               modelo2.addRow(fila);
                        }
                        ResultSet rs2 = s.executeQuery("Select COUNT(IDVENTA) from VENTAS where FECHAVENTA BETWEEN '"+fecha+"' AND '"+fecha1+"'");    
                        int contador=0;
                        while(rs2.next()){       
                            contador=rs2.getInt(1);
                        }
                        tnumVentas.setText(""+contador);
                        if (tipoConexion==2 || tipoConexion==3){
                            double importetotal = 0.0;
                            ResultSet rs3 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS where FECHAVENTA BETWEEN '"+fecha+"' AND '"+fecha1+"'");    
                        
                            while(rs3.next()){       
                                importetotal= (double)rs3.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);                        
                        }
                        else{
                             BigDecimal importetotal = null;
                            ResultSet rs4 = s.executeQuery("Select SUM(PRECIO*cantidad) from VENTAS where FECHAVENTA BETWEEN '"+fecha+"' AND '"+fecha1+"'");    
                        
                            while(rs4.next()){       
                             importetotal=(BigDecimal)rs4.getObject(1);
                            }
                            timporteVentas.setText(""+importetotal);
                        }
                } catch (SQLException ex) {
                    Logger.getLogger(JDClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "Debe introducir todos los campos de las fechas. dd/mm/aa");
            }                     
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    
    public boolean ComprobarFechas(){
        boolean sigue=true;
        if ((tdia.getText()).length()!= 2 || (tdia1.getText()).length()!= 2){
            sigue=false;
            JOptionPane.showMessageDialog(rootPane, "El campo dia debe contener dos digitos");
        }
        if ((tmes.getText()).length()!= 2 || (tmes1.getText()).length()!= 2){
            sigue=false;
            JOptionPane.showMessageDialog(rootPane, "El campo dia debe contener dos digitos");
        }
        if ((tannio.getText()).length()!= 4 || (tannio1.getText()).length()!= 4){
            sigue=false;
            JOptionPane.showMessageDialog(rootPane, "El campo a√±o debe contener cuatro digitos");
        }
        return sigue;
    }
    
    public void InicializaTabla2(){
        table2.setModel(modelo2);     
      modelo2.addColumn("IDVENTA");
      modelo2.addColumn("FECHAVENTA");
      modelo2.addColumn("IDCLIENTE");
      modelo2.addColumn("IDPRODUCTO");
      modelo2.addColumn("CANTIDAD");
      modelo2.addColumn("PRECIO");
    }
    
    private void tannio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tannio1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tannio1ActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboKeyPressed
    
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource()==combo) {
            String seleccionado=(String)combo.getSelectedItem();
            if (seleccionado.compareToIgnoreCase("fechas")==0){
                editarFechas();
            }
        }
    }   
    public void editarFechas(){
            tdia.setEnabled(true); tdia.setText("");
            tmes.setEnabled(true); tmes.setText("");
            tannio.setEnabled(true); tannio.setText("");
            tdia1.setEnabled(true); tdia1.setText("");
            tmes1.setEnabled(true); tmes1.setText("");     
            tannio1.setEnabled(true); tannio1.setText("");
    }
    public void NoeditarFechas(){
            tdia.setEnabled(false); tdia.setText("");
            tmes.setEnabled(false); tmes.setText("");
            tannio.setEnabled(false); tannio.setText("");
            tdia1.setEnabled(false); tdia1.setText("");
            tmes1.setEnabled(false); tmes1.setText("");     
            tannio1.setEnabled(false); tannio1.setText("");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDVentas dialog = new JDVentas(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable table;
    private javax.swing.JTable table2;
    private javax.swing.JTextField tannio;
    private javax.swing.JTextField tannio1;
    private javax.swing.JTextField tdia;
    private javax.swing.JTextField tdia1;
    private javax.swing.JLabel timporteVentas;
    private javax.swing.JTextField tmes;
    private javax.swing.JTextField tmes1;
    private javax.swing.JLabel tnumVentas;
    // End of variables declaration//GEN-END:variables
}
